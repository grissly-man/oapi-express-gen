openapi: 3.1.0
info:
  title: Euler Managed Consent API
  description: |
    API for managing user consent across multiple websites. 
    Euler allows websites to track user consent and provides users with a centralized view of their consent preferences.
  version: 1.0.0
  contact:
    name: Euler Support
    email: support@euler.com
  license:
    name: Proprietary

servers:
  - url: https://api.euler.com/v1
    description: Production server
  - url: https://staging-api.euler.com/v1
    description: Staging server

tags:
  - name: User API
    description: Endpoints for users to manage their consent preferences
  - name: Management API
    description: Endpoints for administrators to manage agreements and domains
  - name: Audit
    description: Public endpoints for independent verification

paths:
  # ============================================================================
  # USER API ENDPOINTS
  # ============================================================================
  
  /user/consents:
    get:
      tags:
        - User API
      summary: Get all user consent preferences
      description: Retrieve all consent preferences for the authenticated user across all domains
      security:
        - BearerAuth: []
      parameters:
        - name: includeInactive
          in: query
          description: Include inactive/revoked consents
          schema:
            type: boolean
            default: false
        - name: pageToken
          in: query
          description: Token for pagination to the next page
          schema:
            type: string
      responses:
        '200':
          description: List of user consents
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserConsentsResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /user/consents/{domain}:
    get:
      tags:
        - User API
      summary: Get user consent preferences for a specific domain
      description: Retrieve consent preferences for the authenticated user for a specific domain
      security:
        - BearerAuth: []
      parameters:
        - name: domain
          in: path
          required: true
          description: Domain name (e.g., example.com)
          schema:
            type: string
        - name: includeInactive
          in: query
          description: Include inactive/revoked consents
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: User consents for the specified domain
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserConsentsResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /user/consents/revoke:
    post:
      tags:
        - User API
      summary: Revoke consent
      description: Revoke consent for specific items or all items for a domain and agreement
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RevokeConsentRequest'
      responses:
        '200':
          description: Consent revoked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevokeConsentResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /user/consents/grant:
    post:
      tags:
        - User API
      summary: Grant consent
      description: Grant consent for specific items for a domain and agreement
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GrantConsentRequest'
      responses:
        '200':
          description: Consent granted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GrantConsentResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /user/history:
    get:
      tags:
        - User API
      summary: Get user consent history
      description: Retrieve consent history for the authenticated user
      security:
        - BearerAuth: []
      parameters:
        - name: domain
          in: query
          description: Filter by specific domain
          schema:
            type: string
        - name: actionType
          in: query
          description: Filter by action type (grant, revoke, update)
          schema:
            type: string
            enum: [grant, revoke, update]
        - name: startDate
          in: query
          description: Start date for filtering (ISO 8601)
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          description: End date for filtering (ISO 8601)
          schema:
            type: string
            format: date-time
        - name: pageToken
          in: query
          description: Token for pagination to the next page
          schema:
            type: string
      responses:
        '200':
          description: User consent history
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentHistoryResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /user/receipts/verify:
    post:
      tags:
        - User API
      summary: Verify consent receipt
      description: Verify a consent receipt by sending the complete receipt string
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyReceiptRequest'
      responses:
        '200':
          description: Receipt verification result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReceiptVerificationResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /user/notifications/preferences:
    get:
      tags:
        - User API
      summary: Get notification preferences
      description: Retrieve user's notification preferences
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User notification preferences
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationPreferences'
        '401':
          $ref: '#/components/responses/Unauthorized'

    put:
      tags:
        - User API
      summary: Update notification preferences
      description: Update user's notification preferences
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationPreferences'
      responses:
        '200':
          description: Notification preferences updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationPreferences'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /user/notifications/ledger:
    get:
      tags:
        - User API
      summary: Get notification ledger
      description: Retrieve history of notifications sent to the user
      security:
        - BearerAuth: []
      parameters:
        - name: notificationType
          in: query
          description: Filter by notification type
          schema:
            type: string
            enum: [email, sms, push]
        - name: startDate
          in: query
          description: Start date for filtering (ISO 8601)
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          description: End date for filtering (ISO 8601)
          schema:
            type: string
            format: date-time
        - name: pageToken
          in: query
          description: Token for pagination to the next page
          schema:
            type: string
      responses:
        '200':
          description: Notification ledger
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationLedgerResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # ============================================================================
  # MANAGEMENT API ENDPOINTS
  # ============================================================================

  /admin/agreements:
    get:
      tags:
        - Management API
      summary: List agreements
      description: Retrieve all agreements for the account, sorted by last published date
      security:
        - BearerAuth: []
      parameters:
        - name: status
          in: query
          description: Filter by agreement status
          schema:
            type: string
            enum: [draft, active, archived]
        - name: domain
          in: query
          description: Filter by domain
          schema:
            type: string
        - name: pageToken
          in: query
          description: Token for pagination to the next page
          schema:
            type: string
      responses:
        '200':
          description: List of agreements
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgreementsResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

    post:
      tags:
        - Management API
      summary: Create new agreement
      description: Create a new agreement with specified terms and granular consent items
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAgreementRequest'
      responses:
        '201':
          description: Agreement created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agreement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /admin/agreements/{agreementId}:
    get:
      tags:
        - Management API
      summary: Get agreement details
      description: Retrieve detailed information about a specific agreement
      security:
        - BearerAuth: []
      parameters:
        - name: agreementId
          in: path
          required: true
          description: Agreement identifier
          schema:
            type: string
      responses:
        '200':
          description: Agreement details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agreement'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - Management API
      summary: Update agreement
      description: Update an existing agreement, creating a new version
      security:
        - BearerAuth: []
      parameters:
        - name: agreementId
          in: path
          required: true
          description: Agreement identifier
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAgreementRequest'
      responses:
        '200':
          description: Agreement updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agreement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /admin/agreements/{agreementId}/publish:
    post:
      tags:
        - Management API
      summary: Publish agreement
      description: Publish a draft agreement, making it active
      security:
        - BearerAuth: []
      parameters:
        - name: agreementId
          in: path
          required: true
          description: Agreement identifier
          schema:
            type: string
      responses:
        '200':
          description: Agreement published successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agreement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /admin/domains:
    get:
      tags:
        - Management API
      summary: List domains
      description: Retrieve all domains associated with the account
      security:
        - BearerAuth: []
      parameters:
        - name: status
          in: query
          description: Filter by domain status
          schema:
            type: string
            enum: [pending, active, deactivated]
      responses:
        '200':
          description: List of domains
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainsResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

    post:
      tags:
        - Management API
      summary: Add domain
      description: Add a new domain to the account
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddDomainRequest'
      responses:
        '201':
          description: Domain added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Domain'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /admin/domains/{domainId}:
    put:
      tags:
        - Management API
      summary: Update domain
      description: Update domain information (name, status can only be set to deactivated)
      security:
        - BearerAuth: []
      parameters:
        - name: domainId
          in: path
          required: true
          description: Domain identifier
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDomainRequest'
      responses:
        '200':
          description: Domain updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Domain'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /admin/import/consents:
    post:
      tags:
        - Management API
      summary: Import consents from CSV
      description: Import user consents from a CSV file
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: CSV file containing consent data
                domain:
                  type: string
                  description: Domain to associate with imported consents
                agreementId:
                  type: string
                  description: Agreement ID to associate with imported consents
                overwriteExisting:
                  type: boolean
                  description: Whether to overwrite existing consents
                  default: false
      responses:
        '202':
          description: Import job started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportJobResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /admin/users:
    get:
      tags:
        - Management API
      summary: List users
      description: Retrieve all users who have consents registered with Euler
      security:
        - BearerAuth: []
      parameters:
        - name: email
          in: query
          description: Filter by email address
          schema:
            type: string
        - name: domain
          in: query
          description: Filter by domain
          schema:
            type: string
        - name: pageToken
          in: query
          description: Token for pagination to the next page
          schema:
            type: string
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /admin/users/{userId}:
    get:
      tags:
        - Management API
      summary: Get user details
      description: Retrieve detailed information about a specific user including consent history
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: User identifier
          schema:
            type: string
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /admin/activityLogs:
    get:
      tags:
        - Management API
      summary: Get activity logs
      description: Retrieve admin activity logs
      security:
        - BearerAuth: []
      parameters:
        - name: actionType
          in: query
          description: Filter by action type
          schema:
            type: string
        - name: userId
          in: query
          description: Filter by user who performed the action
          schema:
            type: string
        - name: startDate
          in: query
          description: Start date for filtering (ISO 8601)
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          description: End date for filtering (ISO 8601)
          schema:
            type: string
            format: date-time
        - name: pageToken
          in: query
          description: Token for pagination to the next page
          schema:
            type: string
      responses:
        '200':
          description: Activity logs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityLogsResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /admin/dashboard:
    get:
      tags:
        - Management API
      summary: Get account dashboard
      description: Retrieve global snapshot of account's current state
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Account dashboard data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  # ============================================================================
  # AUDIT API ENDPOINTS
  # ============================================================================

  /audit/receipts/verify:
    post:
      tags:
        - Audit
      summary: Verify receipt signature
      description: Verify the signature of a consent receipt for independent auditing
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyReceiptRequest'
      responses:
        '200':
          description: Receipt verification result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReceiptVerificationResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # ============================================================================
    # USER API SCHEMAS
    # ============================================================================
    
    UserConsentsResponse:
      type: object
      properties:
        consents:
          type: array
          items:
            $ref: '#/components/schemas/UserConsent'
        nextPageToken:
          type: string
          description: Token for the next page of results

    UserConsent:
      type: object
      properties:
        id:
          type: string
        domain:
          type: string
        agreement:
          $ref: '#/components/schemas/AgreementSummary'
        consentItems:
          type: array
          items:
            $ref: '#/components/schemas/ConsentItem'
        status:
          type: string
          enum: [active, revoked, expired]
        grantedAt:
          type: string
          format: date-time
        revokedAt:
          type: string
          format: date-time

    AgreementSummary:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        version:
          type: string
        source:
          type: string
          enum: [direct, thirdParty]
        createdAt:
          type: string
          format: date-time
        content:
          type: string
          description: HTML content of the agreement

    ConsentItem:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        category:
          type: string
        status:
          type: string
          enum: [granted, revoked, notApplicable]
        textReference:
          type: string
          description: Reference to the specific text in the agreement that this consent item relates to

    RevokeConsentRequest:
      type: object
      required:
        - domain
        - agreementId
        - agreementVersion
      properties:
        domain:
          type: string
          description: Domain for which to revoke consent
        agreementId:
          type: string
          description: Agreement ID for which to revoke consent
        agreementVersion:
          type: string
          description: Version of the agreement for which to revoke consent
        consentItemIds:
          type: array
          items:
            type: string
          description: Specific consent items to revoke. If empty, revokes all consents for the domain and agreement.
        reason:
          type: string
          description: Optional reason for revocation

    RevokeConsentResponse:
      type: object
      properties:
        receipt:
          type: string
          description: Complete receipt string that can be used for verification
        revokedItems:
          type: array
          items:
            type: string
        revokedAt:
          type: string
          format: date-time

    GrantConsentRequest:
      type: object
      required:
        - domain
        - agreementId
        - agreementVersion
        - consentItemIds
      properties:
        domain:
          type: string
          description: Domain for which to grant consent
        agreementId:
          type: string
          description: Agreement ID for which to grant consent
        agreementVersion:
          type: string
          description: Version of the agreement for which to grant consent
        consentItemIds:
          type: array
          items:
            type: string
          description: Specific consent items to grant consent for

    GrantConsentResponse:
      type: object
      properties:
        receipt:
          type: string
          description: Complete receipt string that can be used for verification
        grantedItems:
          type: array
          items:
            type: string
        grantedAt:
          type: string
          format: date-time

    ConsentHistoryResponse:
      type: object
      properties:
        history:
          type: array
          items:
            $ref: '#/components/schemas/ConsentHistoryItem'
        nextPageToken:
          type: string
          description: Token for the next page of results

    ConsentHistoryItem:
      type: object
      properties:
        id:
          type: string
        domain:
          type: string
        action:
          type: string
          enum: [grant, revoke, update]
        consentItems:
          type: array
          items:
            type: string
        agreement:
          $ref: '#/components/schemas/AgreementSummary'
        timestamp:
          type: string
          format: date-time

    VerifyReceiptRequest:
      type: object
      required:
        - receipt
      properties:
        receipt:
          type: string
          description: Complete receipt string to verify

    ReceiptVerificationResponse:
      type: object
      properties:
        isValid:
          type: boolean
        signatureValid:
          type: boolean
        timestamp:
          type: string
          format: date-time
        verificationDetails:
          type: object
        receiptData:
          $ref: '#/components/schemas/ReceiptData'

    ReceiptData:
      type: object
      properties:
        userId:
          type: string
        domain:
          type: string
        action:
          type: string
          enum: [grant, revoke, update]
        consentItems:
          type: array
          items:
            type: string
        agreement:
          $ref: '#/components/schemas/AgreementSummary'
        timestamp:
          type: string
          format: date-time

    NotificationPreferences:
      type: object
      properties:
        emailEnabled:
          type: boolean
        emailFrequency:
          type: string
          enum: [immediate, daily, weekly, never]
        smsEnabled:
          type: boolean
        pushEnabled:
          type: boolean
        notificationTypes:
          type: array
          items:
            type: string
            enum: [consentChanges, agreementUpdates, securityAlerts]

    NotificationLedgerResponse:
      type: object
      properties:
        notifications:
          type: array
          items:
            $ref: '#/components/schemas/NotificationItem'
        nextPageToken:
          type: string
          description: Token for the next page of results

    NotificationItem:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
          enum: [email, sms, push]
        subject:
          type: string
        content:
          type: string
        sentAt:
          type: string
          format: date-time
        status:
          type: string
          enum: [sent, delivered, failed]

    # ============================================================================
    # MANAGEMENT API SCHEMAS
    # ============================================================================
    
    AgreementsResponse:
      type: object
      properties:
        agreements:
          type: array
          items:
            $ref: '#/components/schemas/Agreement'
        nextPageToken:
          type: string
          description: Token for the next page of results

    Agreement:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        version:
          type: string
        status:
          type: string
          enum: [draft, active, archived]
        domain:
          type: string
          description: Single domain this agreement belongs to
        content:
          type: string
          description: HTML content of the agreement
        consentItems:
          type: array
          items:
            $ref: '#/components/schemas/ConsentItemDefinition'
        acceptanceCount:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        publishedAt:
          type: string
          format: date-time

    ConsentItemDefinition:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        category:
          type: string
        required:
          type: boolean
        defaultStatus:
          type: string
          enum: [granted, revoked, notApplicable]
        textReference:
          type: string
          description: Reference to the specific text in the agreement that this consent item relates to

    CreateAgreementRequest:
      type: object
      required:
        - name
        - domain
        - content
        - consentItems
      properties:
        name:
          type: string
        domain:
          type: string
          description: Single domain this agreement belongs to
        content:
          type: string
        consentItems:
          type: array
          items:
            $ref: '#/components/schemas/ConsentItemDefinition'

    UpdateAgreementRequest:
      type: object
      properties:
        name:
          type: string
        content:
          type: string
        consentItems:
          type: array
          items:
            $ref: '#/components/schemas/ConsentItemDefinition'

    DomainsResponse:
      type: object
      properties:
        domains:
          type: array
          items:
            $ref: '#/components/schemas/Domain'
        totalCount:
          type: integer

    Domain:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        fqdn:
          type: string
        status:
          type: string
          enum: [pending, active, deactivated]
          description: Status is automatically set to active when DNS validation completes
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    AddDomainRequest:
      type: object
      required:
        - name
        - fqdn
      properties:
        name:
          type: string
        fqdn:
          type: string

    UpdateDomainRequest:
      type: object
      properties:
        name:
          type: string
        status:
          type: string
          enum: [deactivated]
          description: Can only set to deactivated. Active status is automatic after DNS validation.

    ImportJobResponse:
      type: object
      properties:
        jobId:
          type: string
        status:
          type: string
          enum: [pending, processing, completed, failed]
        totalRecords:
          type: integer
        processedRecords:
          type: integer
        createdAt:
          type: string
          format: date-time

    UsersResponse:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserSummary'
        nextPageToken:
          type: string
          description: Token for the next page of results

    UserSummary:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        domains:
          type: array
          items:
            type: string
        consentCount:
          type: integer
        lastUpdated:
          type: string
          format: date-time

    UserDetails:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        domains:
          type: array
          items:
            type: string
        consents:
          type: array
          items:
            $ref: '#/components/schemas/UserConsent'
        consentHistory:
          type: array
          items:
            $ref: '#/components/schemas/ConsentHistoryItem'

    ActivityLogsResponse:
      type: object
      properties:
        logs:
          type: array
          items:
            $ref: '#/components/schemas/ActivityLog'
        nextPageToken:
          type: string
          description: Token for the next page of results

    ActivityLog:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        userEmail:
          type: string
        action:
          type: string
        details:
          type: string
        timestamp:
          type: string
          format: date-time
        resourceType:
          type: string
        resourceId:
          type: string

    DashboardResponse:
      type: object
      properties:
        totalAgreements:
          type: integer
        activeAgreements:
          type: integer
        totalConsents:
          type: integer
        recentActivityCount:
          type: integer
        domains:
          type: array
          items:
            $ref: '#/components/schemas/DomainSummary'

    DomainSummary:
      type: object
      properties:
        domain:
          type: string
        consentCount:
          type: integer
        userCount:
          type: integer
        status:
          type: string

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              message:
                type: string

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              message:
                type: string

    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              message:
                type: string

    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              message:
                type: string 