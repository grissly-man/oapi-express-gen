openapi: 3.0.0
info:
  title: User Management API
  version: 1.0.0
  description: A simple API for managing users
paths:
  /users:
    get:
      operationId: getUsers
      summary: Get all users
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: Page number
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
          description: Number of users per page
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        name:
                          type: string
                        email:
                          type: string
                  total:
                    type: integer
                  page:
                    type: integer
    post:
      operationId: createUser
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                age:
                  type: integer
                  minimum: 0
              required:
                - name
                - email
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  email:
                    type: string
                  age:
                    type: integer
  /users/{userId}:
    get:
      operationId: getUser
      summary: Get a specific user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  email:
                    type: string
                  age:
                    type: integer
        '404':
          description: User not found
    put:
      operationId: updateUser
      summary: Update a user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                age:
                  type: integer
                  minimum: 0
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  email:
                    type: string
                  age:
                    type: integer
        '404':
          description: User not found
    delete:
      operationId: deleteUser
      summary: Delete a user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      responses:
        '204':
          description: User deleted
        '404':
          description: User not found
  /users/{userId}/posts:
    get:
      operationId: getUserPosts
      summary: Get posts by a specific user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
        - name: status
          in: query
          schema:
            type: string
            enum:
              - draft
              - published
              - archived
          description: Post status filter
        - name: tags
          in: query
          schema:
            type: array
            items:
              type: string
          description: Tags to filter by
      responses:
        '200':
          description: List of user posts
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        title:
                          type: string
                        content:
                          type: string
                        status:
                          type: string
                          enum:
                            - draft
                            - published
                            - archived
                        tags:
                          type: array
                          items:
                            type: string
                        createdAt:
                          type: string
                          format: date-time
                  total:
                    type: integer
        '404':
          description: User not found
  /health:
    get:
      operationId: getHealth
      summary: Health check endpoint
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - healthy
                      - degraded
                  timestamp:
                    type: string
                    format: date-time
                  version:
                    type: string
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
          format: email
        age:
          type: integer
          minimum: 0
      required:
        - id
        - name
        - email
    Post:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        content:
          type: string
        status:
          type: string
          enum:
            - draft
            - published
            - archived
        tags:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        authorId:
          type: string
          format: uuid
      required:
        - id
        - title
        - content
        - status
        - authorId 